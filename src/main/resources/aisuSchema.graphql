schema {
  query: Query
  mutation: Mutation
}

"Marks the field, argument, input field or enum value as deprecated"
directive @deprecated(
  "The reason for the deprecation"
  reason: String = "No longer supported"
) on FIELD_DEFINITION | ARGUMENT_DEFINITION | ENUM_VALUE | INPUT_FIELD_DEFINITION

"Directs the executor to include this field or fragment only when the `if` argument is true"
directive @include(
  "Included when true."
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Directs the executor to skip this field or fragment when the `if` argument is true."
directive @skip(
  "Skipped when true."
  if: Boolean!
) on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT

"Exposes a URL that specifies the behaviour of this scalar."
directive @specifiedBy(
  "The URL that specifies the behaviour of this scalar."
  url: String!
) on SCALAR

interface PaginationSerializer {
  currentPage: Int!
  pageCount: Int!
}

type ChekiIdolCountSerializer {
  chekiCount: Int!
  idol: IdolSerializer
  idolId: ID!
}

type ChekiMonthIdolCountSerializer {
  chekiCount: Int!
  chekiShotAtMonth: ChekiShotAtMonthSerializer!
  idol: IdolSerializer
  idolId: ID!
}

type ChekiMutationServices {
  addCheki(params: AddOrUpdateChekiParamsInput!): ChekiSerializer!
  deleteCheki(chekiId: ID!): String!
  updateCheki(chekiId: ID!, params: AddOrUpdateChekiParamsInput!): ChekiSerializer!
}

type ChekiSerializer {
  chekiCreatedAt: String!
  chekiId: ID!
  chekiQuantity: Int!
  chekiShotAt: String!
  chekiUpdatedAt: String!
  idol: IdolSerializer
  idolId: ID
  regulation: RegulationSerializer
  regulationId: ID
  user: LimitedUserSerializer
  userId: ID!
}

type ChekiShotAtMonthSerializer {
  baseTimezone: String!
  month: Int!
  year: Int!
}

type CurrentUserGroups {
  getGroupsCreatedByUser(page: Int!): GroupPaginationSerializer!
}

type CurrentUserIdols {
  getIdolsCreatedByUser(page: Int!): IdolPaginationSerializer!
}

type GroupPaginationSerializer implements PaginationSerializer {
  currentPage: Int!
  groups: [GroupSerializer!]!
  pageCount: Int!
}

type GroupSerializer {
  groupCreatedAt: String!
  groupId: ID!
  groupName: String!
  groupStatus: String!
  groupUpdatedAt: String!
  user: LimitedUserSerializer
  userId: ID
}

type IdolMutationServices {
  addIdol(params: AddOrUpdateIdolParamsInput!): IdolSerializer!
  deleteIdol(idolId: ID!): String!
  updateIdol(idolId: ID!, params: AddOrUpdateIdolParamsInput!): IdolSerializer!
}

type IdolPaginationSerializer implements PaginationSerializer {
  currentPage: Int!
  idols: [IdolSerializer!]!
  pageCount: Int!
}

type IdolSerializer {
  idolCreatedAt: String!
  idolId: ID!
  idolName: String!
  idolStatus: String!
  idolUpdatedAt: String!
  user: LimitedUserSerializer
  userId: ID
}

type LimitedUserSerializer {
  userId: ID!
  userName: String!
}

type Mutation {
  cheki: ChekiMutationServices!
  idol: IdolMutationServices!
  user: UserMutationServices!
}

type Query {
  currentUser: UserSerializer
  currentUserChekis: UserChekis!
  currentUserGroups: CurrentUserGroups!
  currentUserIdols: CurrentUserIdols!
  getAllIdols(page: Int!): IdolPaginationSerializer!
  getCheki(chekiId: ID!): ChekiSerializer!
  getGroup(groupId: ID!): GroupSerializer!
  getIdol(idolId: ID!): IdolSerializer!
}

type RegulationSerializer {
  group: GroupSerializer
  groupId: ID!
  regulationComment: String!
  regulationCreatedAt: String!
  regulationId: ID!
  regulationName: String!
  regulationStatus: String!
  regulationUnitPrice: Int!
  regulationUpdatedAt: String!
  user: LimitedUserSerializer
  userId: ID
}

type UserChekis {
  getChekiMonthIdolCount(params: GetChekiMonthIdolCountParamsInput!): [ChekiMonthIdolCountSerializer!]!
  getUserChekiIdolCount(params: GetUserChekiIdolCountParamsInput!): [ChekiIdolCountSerializer!]!
  getUserChekis(params: GetUserChekisParamsInput!): [ChekiSerializer!]!
}

type UserMutationServices {
  userCreate(params: UserCreateParamsInput!): UserSerializer!
  userLogin(params: UserLoginParamsInput!): UserSerializer!
  userLogout: String!
}

type UserSerializer {
  userCreatedAt: String!
  userEmail: String
  userEmailVerifiedAt: String
  userId: ID!
  userName: String!
  userUpdatedAt: String!
}

enum IdolStatus {
  OPERATION_DELETED
  PRIVATE_ACTIVE
  PRIVATE_NOT_ACTIVE
  PUBLIC_ACTIVE
  PUBLIC_NOT_ACTIVE
}

input AddOrUpdateChekiParamsInput {
  chekiQuantity: Int!
  chekiShotAt: String!
  idolId: ID!
  regulationId: ID
}

input AddOrUpdateIdolParamsInput {
  idolName: String!
  idolStatus: IdolStatus!
}

input GetChekiMonthIdolCountParamsInput {
  baseTimezone: String!
}

input GetUserChekiIdolCountParamsInput {
  chekiShotAtEnd: String!
  chekiShotAtStart: String!
}

input GetUserChekisParamsInput {
  chekiShotAtEnd: String!
  chekiShotAtStart: String!
  idolId: ID
}

input UserCreateParamsInput {
  email: String!
  name: String!
  password: String!
}

input UserLoginParamsInput {
  email: String!
  password: String!
}
